{"ast":null,"code":"// Search bar, Quiries the spotify api to find the song, album, artist, playlist, and user\n// after user insert to the search input the navbar shows a dropdown with all the results\nimport React from 'react';\nimport './Navbar.css';\nimport { Link } from 'react-router-dom'; // import { Link } from 'react-router-dom';\n// import { useState } from 'react';\n// import { useEffect } from 'react';\n// import { useRef } from 'react';\n// import { useCallback } from 'react';\n// import { useMemo } from 'react';\n// import axios from 'axios';\n// import defaultImage from './Profile.jpg';\n// const Navbar = () => {\n//     const [search, setSearch] = useState('');\n//     const [results, setResults] = useState([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(null);\n//     const token = localStorage.getItem('access_token');\n//     const searchRef = useRef(null);\n//     const handleSubmit = useCallback(\n//         (event) => {\n//             event.preventDefault();\n//             setLoading(true);\n//             setError(null);\n//             setResults([]);\n//             axios.get(`https://api.spotify.com/v1/search?q=${search}&type=track,artist,album,playlist,user`, {\n//                 headers: {\n//                     'Authorization': 'Bearer ' + token\n//                 }\n//             })\n//                 .then(response => {\n//                     setResults(response.data.tracks.items);\n//                     setLoading(false);\n//                 })\n//                 .catch(error => {\n//                     setError(error);\n//                     setLoading(false);\n//                 });\n//         },\n//         [search, token]\n//     );\n//     useEffect(() => {\n//         if (searchRef.current) {\n//             searchRef.current.focus();\n//         }\n//     }, [searchRef]);\n//     const handleChange = useCallback(\n//         (event) => {\n//             setSearch(event.target.value);\n//         },\n//         [setSearch]\n//     );\n//     const handleKeyPress = useCallback(\n//         (event) => {\n//             if (event.key === 'Enter') {\n//                 handleSubmit(event);\n//             }\n//         },\n//         [handleSubmit]\n//     );\n//     const handleClick = useCallback(\n//         (item) => {\n//             setSearch(item.name);\n//             setResults([]);\n//         },\n//         [setSearch, setResults]\n//     );\n//     const resultsList = useMemo(\n//         () => {\n//             if (loading) {\n//                 return <div>Loading...</div>;\n//             }\n//             if (error) {\n//                 return <div>Error: {error.message}</div>;\n//             }\n//             if (results.length === 0) {\n//                 return <div>No results found</div>;\n//             }\n//             return (\n//                 <ul className=\"Navbar-results\">\n//                     {results.map(item => (\n//                         <li key={item.id} onClick={() => handleClick(item)}>\n//                             <img src={item.album.images.length ? item.album.images[0].url : defaultImage} alt={item.name} />\n//                             <div className=\"Navbar-results-info\">\n//                                 <div className=\"Navbar-results-name\">{item.name}</div>\n//                                 <div className=\"Navbar-results-type\">{item.type}</div>\n//                             </div>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             );\n//         },\n//         [loading, error, results, handleClick]\n//     );\n// }\n// export default Navbar","map":{"version":3,"names":["React","Link"],"sources":["/home/pinkyy/zebi/dirabk/spotyhi/src/Navbar/Navbar.js"],"sourcesContent":["// Search bar, Quiries the spotify api to find the song, album, artist, playlist, and user\n// after user insert to the search input the navbar shows a dropdown with all the results\n\nimport React from 'react';\nimport './Navbar.css';\nimport { Link } from 'react-router-dom';\n\n\n\n\n\n\n\n\n// import { Link } from 'react-router-dom';\n// import { useState } from 'react';\n// import { useEffect } from 'react';\n// import { useRef } from 'react';\n// import { useCallback } from 'react';\n// import { useMemo } from 'react';\n// import axios from 'axios';\n// import defaultImage from './Profile.jpg';\n// const Navbar = () => {\n    \n//     const [search, setSearch] = useState('');\n//     const [results, setResults] = useState([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(null);\n//     const token = localStorage.getItem('access_token');\n//     const searchRef = useRef(null);\n\n//     const handleSubmit = useCallback(\n//         (event) => {\n//             event.preventDefault();\n//             setLoading(true);\n//             setError(null);\n//             setResults([]);\n//             axios.get(`https://api.spotify.com/v1/search?q=${search}&type=track,artist,album,playlist,user`, {\n//                 headers: {\n//                     'Authorization': 'Bearer ' + token\n//                 }\n//             })\n//                 .then(response => {\n//                     setResults(response.data.tracks.items);\n//                     setLoading(false);\n//                 })\n//                 .catch(error => {\n//                     setError(error);\n//                     setLoading(false);\n//                 });\n//         },\n//         [search, token]\n//     );\n\n//     useEffect(() => {\n//         if (searchRef.current) {\n//             searchRef.current.focus();\n//         }\n//     }, [searchRef]);\n\n//     const handleChange = useCallback(\n//         (event) => {\n//             setSearch(event.target.value);\n//         },\n//         [setSearch]\n//     );\n\n//     const handleKeyPress = useCallback(\n//         (event) => {\n//             if (event.key === 'Enter') {\n//                 handleSubmit(event);\n//             }\n//         },\n//         [handleSubmit]\n//     );\n\n//     const handleClick = useCallback(\n//         (item) => {\n//             setSearch(item.name);\n//             setResults([]);\n//         },\n//         [setSearch, setResults]\n//     );\n\n//     const resultsList = useMemo(\n//         () => {\n//             if (loading) {\n//                 return <div>Loading...</div>;\n//             }\n//             if (error) {\n//                 return <div>Error: {error.message}</div>;\n//             }\n//             if (results.length === 0) {\n//                 return <div>No results found</div>;\n//             }\n//             return (\n//                 <ul className=\"Navbar-results\">\n//                     {results.map(item => (\n//                         <li key={item.id} onClick={() => handleClick(item)}>\n//                             <img src={item.album.images.length ? item.album.images[0].url : defaultImage} alt={item.name} />\n//                             <div className=\"Navbar-results-info\">\n//                                 <div className=\"Navbar-results-name\">{item.name}</div>\n//                                 <div className=\"Navbar-results-type\">{item.type}</div>\n//                             </div>\n//                         </li>\n//                     ))}\n//                 </ul>\n//             );\n//         },\n//         [loading, error, results, handleClick]\n//     );\n// }\n\n// export default Navbar"],"mappings":"AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}